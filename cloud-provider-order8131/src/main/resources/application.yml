server:
  port: 8131


spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: cloud-payment-order-service

  # sharding-jdbc配置
  shardingsphere:
    datasource:
      names: m0,m1,m2
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.244.128:3306/order_db_1?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=false&allowMultiQueries=true
        username: root
        password: root123456
      m2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.244.128:3306/order_db_2?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=false&allowMultiQueries=true
        username: root
        password: root123456
      m0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.244.128:3306/user_db?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=false&allowMultiQueries=true
        username: root
        password: root123456

    sharding:
      tables:
        t_user:
          # 指定t_user表的数据分布情况，配置数据节点
          actual-data-nodes: m0.t_user
          # 指定t_user表的分片策略，分片算法包括分片键和分片算法
          table-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: t_user
        t_order:
          # 指定t_order表的数据分布情况，配置数据节点
          actual-data-nodes: m$->{1..2}.t_order_$->{1..2}
          # 指定t_order表的主键生成策略为SNOWFLAKE
          key-generator.column: order_id
          key-generator.type: SNOWFLAKE
          # 指定分库策略，以user_id为分片键
          database-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: m$->{user_id % 2 + 1}
          # 指定t_order表的分片策略，分片算法包括分片键和分片算法
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order_$->{order_id % 2 + 1}
    props:
      sql:
        show: true

eureka:
  instance:
    hostname: localhost
    instance-id: payment8001
    prefer-ip-address: true #访问路径可以显示IP地址
#    lease-renewal-interval-in-seconds: 1 #Eureka客户端向服务端发送心跳的时间间隔，单位是秒，默认是30秒
#    lease-expiration-duration-in-seconds: 2 #Eureka服务端收到最后一次心跳后等待时间上限，超时将剔除服务，单位是秒，默认90秒
  client:
    #true表示向注册中心注册自己
    register-with-eureka: true
    #true表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务
    fetch-registry: true
    service-url:
      #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址
      #单机版
#      defaultZone: http://eureka7001.com:7001/eureka
      #集群版，注册地址以逗号隔开
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka
mybatis:
  configuration:
    map-underscore-to-camel-case: true
  mapper-locations: classpath*:mapper/*.xml
  type-aliases-package: com.jt.sharding.entities



